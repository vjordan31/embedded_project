/*
 *  Copyright 2010 by Texas Instruments Incorporated.
 *  All rights reserved. Property of Texas Instruments Incorporated.
 *  Restricted rights to use, duplicate or disclose this code are
 *  granted through contract.
 *
 */
/*
 *  ======== hello.tcf ========
 *  Configuration script used to generate the example's configuration files
 */

utils.loadPlatform("ti.platforms.evmOMAPL138");
/*
 * Enable common BIOS features used by all examples
 */
bios.enableRealTimeAnalysis(prog);
bios.enableMemoryHeaps(prog);
bios.enableRtdx(prog);	
bios.enableTskManager(prog);

/*
 * Enable heaps in IRAM and define label SEG0 for heap usage.
 */

 
bios.IRAM.createHeap      = true;
bios.IRAM.enableHeapLabel = true;
bios.IRAM["heapLabel"]    = prog.extern("SEG0");
bios.IRAM.heapSize        = 0x2000;
bios.MEM.BIOSOBJSEG = prog.get("IRAM");
bios.MEM.MALLOCSEG = prog.get("IRAM");

/*
 *  The following statements will enable the MAR bit for MAR 128.
 *  (MAR 192 to MAR 223 are enabled by default).
 *  This will make the memory ranges (0x8000 0000 - 0x8001 FFFF) and
 *  (0xC000 0000 - 0xDFFF FFFF) cacheable.
 */
bios.GBL.C64PLUSCONFIGURE = 1;
bios.GBL.C64PLUSMAR128to159 = 0x00000001;

/*
 *  When using the ARM with DSP, the ARM will share Timer 1 with the DSP.
 *  The ARM needs to enable power to Timer 1, program the timer for "32-bit unchainded" mode
 *  and take it out of reset.  The BIOS CLK should be driven with Timer 1 and not reset
 *  the timer.
 *
 *  In most production ARM+DSP systems we recommend removing these 2
 *  lines and sharing Timer1 with the Arm.  This will free up Timer0 for use by the
 *  application.
 *
 *  The workaround below is used to make the DSP-side applications work "out of the box"
 *  without any need for coordination with the ARM OS.
 */

bios.CLK.TIMERSELECT = "Timer 0";      /* Select Timer 0 to drive BIOS CLK */
bios.CLK.RESETTIMER = true;          /* Take the selected timer our of reset */

/*
 * Create and initialize a LOG object
 */

var trace;
trace         = bios.LOG.create("trace");
trace.bufLen  = 1024;
trace.logType = "circular";

/*
 * Set the buffer length of LOG_system buffer
 */

bios.LOG_system.bufLen = 512;

bios.PRD.instance("PWRM_slotFinalizer").order = 1;
bios.HWI.instance("HWI_INT5").fxn = prog.extern("audioHWI");
bios.HWI.instance("HWI_INT5").interruptSelectNumber = 61;
bios.HWI.instance("HWI_INT5").useDispatcher = 1;
bios.TSK.instance("TSK_idle").order = 1;
bios.TSK.create("dipMonitorTsk");
bios.TSK.instance("dipMonitorTsk").order = 3;
bios.TSK.instance("dipMonitorTsk").fxn = prog.extern("dipMonitorTsk");
bios.TSK.instance("dipMonitorTsk").fxn = prog.extern("dipMonitor_TSK");
bios.PRD.create("dipStatusPRD");
bios.PRD.instance("dipStatusPRD").order = 4;
bios.PRD.instance("dipStatusPRD").fxn = prog.extern("dipStatus_PRD");
bios.PRD.instance("dipStatusPRD").order = 1;
bios.PRD.instance("PWRM_slotFinalizer").order = 2;
bios.PRD.instance("dipStatusPRD").period = 50;
bios.SWI.instance("PRD_swi").order = 1;
bios.SWI.instance("KNL_swi").order = 2;
bios.SWI.instance("PWRM_loadSwi").order = 3;
bios.SWI.create("filteringSWI");
bios.SWI.instance("filteringSWI").order = 5;
bios.SWI.instance("filteringSWI").fxn = prog.extern("swi0");
bios.SWI.instance("filteringSWI").fxn = prog.extern("filtering_SWI");
bios.SWI.instance("filteringSWI").order = 1;
bios.SWI.instance("PRD_swi").order = 2;
bios.SWI.instance("KNL_swi").order = 3;
bios.SWI.instance("PWRM_loadSwi").order = 4;
bios.SWI.instance("filteringSWI").priority = 2;
bios.TSK.instance("dipMonitorTsk").order = 2;
bios.SEM.create("dipMonitorSem");
bios.PRD.create("systemOnBufferLEDPRD");
bios.PRD.instance("systemOnBufferLEDPRD").order = 6;
bios.PRD.instance("systemOnBufferLEDPRD").fxn = prog.extern("systemOnLED_PRD");
bios.PRD.instance("systemOnBufferLEDPRD").period = 50;
bios.PRD.instance("systemOnBufferLEDPRD").fxn = prog.extern("systemOnBufferLED_PRD");
bios.TSK.create("systemOnBufferLEDTsk");
bios.TSK.instance("systemOnBufferLEDTsk").order = 6;
bios.TSK.instance("systemOnBufferLEDTsk").fxn = prog.extern("systemOnLED_TSK");
bios.TSK.instance("systemOnBufferLEDTsk").fxn = prog.extern("systemOnBufferLED_TSK");
bios.SEM.create("systemOnBufferLEDSem");
bios.TSK.instance("systemOnBufferLEDTsk").order = 4;
bios.TSK.create("systemBufferPlaybackLEDTsk");
bios.TSK.instance("systemBufferPlaybackLEDTsk").order = 6;
bios.TSK.instance("systemBufferPlaybackLEDTsk").fxn = prog.extern("systemBufferingLED_TSK");
bios.TSK.instance("systemBufferPlaybackLEDTsk").fxn = prog.extern("systemBufferPlaybackLED_TSK");
bios.SEM.create("systemBufferPlaybackLEDSem");
bios.TSK.instance("systemOnBufferLEDTsk").order = 3;
bios.TSK.instance("systemBufferPlaybackLEDTsk").order = 4;
bios.TSK.create("systemFilBufferPlaybackLEDTsk");
bios.TSK.instance("systemFilBufferPlaybackLEDTsk").order = 6;
bios.TSK.instance("systemFilBufferPlaybackLEDTsk").fxn = prog.extern("systemFilteringLED_TSK");
bios.TSK.instance("systemFilBufferPlaybackLEDTsk").fxn = prog.extern("systemFilBufferPlaybackLED_TSK");
bios.SEM.create("systemFilBufferPlaybackLEDSem");
bios.PRD.instance("systemOnBufferLEDPRD").order = 4;
bios.PRD.create("systemBufferPlaybackLEDPRD");
bios.PRD.instance("systemBufferPlaybackLEDPRD").order = 6;
bios.PRD.instance("systemBufferPlaybackLEDPRD").fxn = prog.extern("systemBufferingLED_PRD");
bios.PRD.instance("systemBufferPlaybackLEDPRD").period = 500;
bios.PRD.instance("systemBufferPlaybackLEDPRD").fxn = prog.extern("systemBufferPlaybackLED_PRD");
bios.PRD.instance("systemOnBufferLEDPRD").order = 3;
bios.PRD.instance("systemBufferPlaybackLEDPRD").order = 4;
bios.PRD.create("systemFilBufferPlaybackLEDPRD");
bios.PRD.instance("systemFilBufferPlaybackLEDPRD").order = 6;
bios.PRD.instance("systemFilBufferPlaybackLEDPRD").fxn = prog.extern("systemFilteringLED_PRD");
bios.PRD.instance("systemFilBufferPlaybackLEDPRD").period = 166;
bios.PRD.instance("systemFilBufferPlaybackLEDPRD").fxn = prog.extern("systemFilBufferPlaybackLED_PRD");
bios.SWI.instance("PRD_swi").order = 1;
bios.SWI.instance("KNL_swi").order = 2;
bios.SWI.instance("PWRM_loadSwi").order = 3;
bios.SWI.instance("filteringSWI").order = 4;
bios.SWI.instance("filteringSWI").destroy();
bios.TSK.instance("systemFilBufferPlaybackLEDTsk").order = 4;
bios.TSK.instance("systemBufferPlaybackLEDTsk").destroy();
bios.TSK.instance("systemFilBufferPlaybackLEDTsk").destroy();
bios.TSK.instance("systemOnBufferLEDTsk").destroy();
bios.TSK.instance("dipMonitorTsk").destroy();
bios.PRD.instance("dipStatusPRD").period = 200;
bios.PRD.instance("dipStatusPRD").period = 300;
// !GRAPHICAL_CONFIG_TOOL_SCRIPT_INSERT_POINT!

if (config.hasReportedError == false) {
    prog.gen();
}
